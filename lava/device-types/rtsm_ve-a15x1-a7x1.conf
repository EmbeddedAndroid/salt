client_type=fastmodel

# how long the disablesuspend script should take to complete
# fm takes longer than other android images do
disablesuspend_timeout = 500

# how long ubuntu takes to boot to prompt
boot_linaro_timeout = 800

# if you do dhcp on boot, adb will not work (asac) on fastmodels
enable_network_after_boot_android = 0

# we do usermode networking over the loopback
default_network_interface = lo

bootloader_prompt = Start:

interrupt_boot_prompt = The default boot selection will start in

# Ubuntu UEFI boot commands
boot_cmds = sendline a,
           expect Choice:,
           sendline 1,
           expect Select the Boot Device:,
           sendline 2,
           expect File path of the EFI Application or the kernel:,
           sendline Image,
           expect [a/g/l],
           sendline l,
           expect Add an initrd: [y/n],
           sendline y,
           expect File path of the initrd:,
           sendline Initrd,
           expect Arguments to pass to the binary:,
           sendline 'console=ttyAMA0,38400n8 root=/dev/mmcblk0p2 rootwait ro mem=1024M',
           expect File path of the local FDT:,
           sendline rtsm\\rtsm_ve-ca15x1-ca7x1.dtb,
           expect Description for this new Entry:,
           sendline Test Image,
           expect Choice:,
           sendline 5,
           expect Start:,
           sendline 2

simulator_axf_files =
    img.axf
    linux-system-ISW.axf
    linux-system-semi.axf

simulator_kernel_files =
    Image
    uImage
    vmlinuz.*

simulator_kernel = Image

simulator_initrd_files =
    uInitrd
    initrd.*

simulator_initrd = Initrd

simulator_dtb_files =
    rtsm_ve-ca15x1-ca7x1.dtb

simulator_dtb = rtsm_ve-ca15x1-ca7x1.dtb

simulator_uefi_files =
    uefi_rtsm_ve-ca15.bin

license_file = 8224@localhost

sim_bin = /opt/arm/RTSM_A15-A7x14_VE/Linux64_RTSM_VE_Cortex-A15x1-A7x1/RTSM_VE_Cortex-A15x1-A7x1

android_adb_port = 6555

simulator_version_command = %(sim_bin)s --version | grep "Fast Models" | sed 's/Fast Models \[//' | sed 's/\]//'

simulator_boot_wrapper = -a coretile.cluster0.*={AXF}

simulator_command = sudo ARMLMD_LICENSE_FILE="%(license_file)s" %(sim_bin)s

boot_options =
        motherboard.mmc.p_mmc_file
	motherboard.hostbridge.userNetPorts
	motherboard.smsc_91c111.enabled
	motherboard.hostbridge.userNetworking
        motherboard.flashloader0.fname
        motherboard.flashloader1.fname
        motherboard.flashloader1.fnameWrite
	coretile.cache_state_modelled
	coretile.cluster0.cpu0.semihosting-enable
	coretile.cluster0.cpu0.semihosting-cmd_line

[motherboard.mmc.p_mmc_file]
default = {IMG}

[motherboard.hostbridge.userNetPorts]
default="%(android_adb_port)s=%(android_adb_port)s"

[motherboard.smsc_91c111.enabled]
default = 1
allowed = 0,1

[motherboard.hostbridge.userNetworking]
default = 1
allowed = 0,1

[motherboard.flashloader0.fname]
default = {UEFI}

[motherboard.flashloader1.fname]
default = uefi-vars.fd

[motherboard.flashloader1.fnameWrite]
default = uefi-vars.fd

[coretile.cache_state_modelled]
default = 0
allowed = 0,1

[coretile.cluster0.cpu0.semihosting-enable]
default = 1
allowed = 0,1

[coretile.cluster0.cpu0.semihosting-cmd_line]
default = "--kernel {KERNEL} --dtb {DTB} --initrd {INITRD} -- console=ttyAMA0,38400n8  root=/dev/mmcblk0p2  rootwait ro mem=1024M"
